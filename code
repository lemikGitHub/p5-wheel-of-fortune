const windowW = 1200;
const windowH = 500;
var stage = 0; //0: title screen, 1: player names, 2: points system
var players = []

//stage1
var playerCount = 0;
var playerEnteringName = 1;
class player {
	constructor(name, points, exists) {
		this.name = "";
		this.points = 0;
		this.exists = false
	}
}
var p1 = new player();
var p2 = new player();
var p3 = new player();
var p4 = new player();
var p5= new player();
var players = [0, p1, p2, p3, p4, p5];
//gameplay

class category {
	constructor(hint, words) {
		this.hint = "";
		this.words = [];
	}
}
var animals = new category();
animals.hint = "An Animal"
animals.words = ["zebra", "lion", "giraffe", "dog", "pig", "buffalo", "treefrog"]
var furniture = new category();
furniture.hint = "A piece of furniture"
furniture.words = ["couch", "table", "chair", "desk", "bookshelf"];
var timesOfDay = new category();
timesOfDay.hint = "A time of the day"
timesOfDay.words = ["morning", "daytime", "noon", "afternoon", "evening", "dawn", "dusk", "daybreak", "nightfall", "midnight", "nighttime", "sunrise", "sunset"]

var guess = ""
var prizePool = 0
var categories = [animals, furniture, timesOfDay]
var categoryG, wordG;
var s3db = 0;
var hiddenWord = "";
var hardMode = false;

var turn = 1

var cw, ww

function setup() {
	createCanvas(windowW, windowH);
	background(0, 0, 100);
	rectMode(CENTER);
}

function draw() {
	if(turn==5){
		turn=1
	}
	if (stage == 0) {
		background(0, 0, 100);
		fill(255);
		textSize(100);
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		text("Square of Luck", windowW / 2 - (windowW / 4 + 50), windowH / 2 - windowH / 4); //title
		for (let i = 1; i < 5; i++) {
			rect(windowW / 2, windowH / 2 + i * 50, 100, 40)
			strokeWeight(0);
			fill(255);
			textSize(30);
			text(str(i) + "P", windowW / 2 - 25, windowH / 2 + i * 50 + 10)
			textSize(100);
			fill(0, 200, 200);
			stroke(0, 255, 255);
			strokeWeight(5);
		}
	}
	if (stage == 1) {
		if (playerEnteringName == playerCount + 1 || playerEnteringName == 5) {
			stage = 7;
		}
		background(0, 0, 100)
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		textSize(50)
		text("Player " + playerEnteringName + " name:", windowW / 2 + (windowW / 4 - 475), windowH / 2 - windowH / 4)
		stroke(100)
		fill(127.5);
		rect(windowW / 2, windowH / 2 + 20, 500, 40);
		fill(255);
		textSize(17.5);
		if (playerEnteringName < 5) {
			text(players[playerEnteringName].name, windowW / 2 - 240, windowH / 2 + 25);
		}
	}
	if (stage == 2) {
		background(0, 0, 100);
		fill(255);
		stroke(0);
		for (let i = 1; i < players.length; i++) {
			textSize(17.5);
			text(players[i].name, i * 235, 400);
			textSize(50);
			if (players[i].exists) {
				text(players[i].points, i * 235, 450);
			}
		}
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		rect(windowW / 2, windowH / 2 - 100, 400, 100)
		strokeWeight(0);
		fill(255);
		textSize(70);
		text("Next Turn", windowW / 2 - 150, windowH / 2 - 75)
	}
	if (stage == 3) {
		background(255, 255, 0);
		if (prizePool == 0) {
			prizePool = Math.floor(random(100, 301))
		}
		fill(0);
		stroke(127.5, 127.5, 0)
		strokeWeight(5);
		textSize(100);
		text("Prize Pool: " + str(prizePool) + " points!", 100, windowH / 2);
		s3db += 1
	}
	if (stage == 4) {
		background(0, 0, 100);
		fill(255);
		stroke(0, 255, 255)
		strokeWeight(5);
		textSize(75);
		if (turn != 5) {
			text(players[turn].name + "'s turn!", 150, windowH / 2 - (windowH / 4));
		}
		text(hiddenWord, 150, 400);
		textSize(50)
		text(categoryG.hint, 150, 480)
		fill(0, 200, 200)
		rect(1050, 125, 300, 250)
		strokeWeight(0);
		fill(255);
		textSize(30);
		fill(0, 200, 200)
		stroke(0, 255, 255)
		strokeWeight(5);
		rect(1050, 375, 300, 250)
		fill(255);
		strokeWeight(0);
		text("Guess Word", 950, 125)
		text("Guess Letter", 950, 375)
	}
	if (stage == 5) { //guess letter
		background(0, 0, 100);
		fill(255);
		textSize(100);
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		text("Guess Letter", windowW / 2 - (windowW / 4 + 50), windowH / 2 - windowH / 4); //title
		text(guess, windowW / 2 - (windowW / 4 + 50), windowH / 2 + windowH / 4); //title
	}
	if (stage == 6) { //guess word
		background(0, 0, 100);
		fill(255);
		textSize(100);
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		text("Guess Word", windowW / 2 - (windowW / 4 + 50), windowH / 2 - windowH / 4); //title
		text(guess, windowW / 2 - (windowW / 4 + 50), windowH / 2 + windowH / 4); //title
	}
	if(stage==7){
		background(0, 0, 100);
		fill(255);
		textSize(100);
		fill(0, 200, 200);
		stroke(0, 255, 255);
		strokeWeight(5);
		text("Choose Difficulty", windowW / 2 - (windowW / 4 + 50), windowH / 2 - windowH / 4); //title
		fill(0,255,0)
		stroke(0,200,0)
		rect(windowW/2,windowH/2,300,83.3);
		fill(255)
		strokeWeight(0);
		textSize(50)
		text("Easy Mode",windowW/2-150,windowH/2+20)
		fill(255,0,0)
		stroke(200,0,0)
		strokeWeight(5);
		rect(windowW/2,windowH/4*3,300,83.3);
		fill(255)
		strokeWeight(0);
		text("Hard Mode",windowW/2-150,windowH/4*3+20)
	}
}

function mousePressed() {
	if (stage == 0) {
		if (mouseX <= windowW / 2 + 50 && mouseX >= windowW / 2 - 50) {
			if (mouseY <= windowH / 2 + 50 + 20 && mouseY >= windowH / 2 + 50 - 20) {
				playerCount = 1;
				stage = 1
			} else if (mouseY <= windowH / 2 + 100 + 20 && mouseY >= windowH / 2 + 100 - 20) {
				playerCount = 2;
				stage = 1
			} else if (mouseY <= windowH / 2 + 150 + 20 && mouseY >= windowH / 2 + 150 - 20) {
				playerCount = 3;
				stage = 1
			} else if (mouseY <= windowH / 2 + 200 + 20 && mouseY >= windowH / 2 + 200 - 20) {
				playerCount = 4;
				stage = 1;
			}
		}
	}
	if(stage==7){
		if (mouseX <= windowW / 2 + 150 && mouseX >= windowW / 2 - 150) {
			if (mouseY <= windowH / 2 +41.65 && mouseY >= windowH / 2 - 41.65) {
				hardMode=false
				stage=2;
			}
		}
		if (mouseX <= windowW / 2 + 150 && mouseX >= windowW / 2 - 150) {
			if (mouseY <= windowH / 4*3 +41.65 && mouseY >= windowH / 2 - 41.65) {
				hardMode=true
				stage=2;
			}
		}
	}
	if (stage == 2) {
		//windowW / 2, windowH / 2 - 100, 400, 100
		if (mouseX <= windowW / 2 + 200 && mouseX >= windowW / 2 - 200) {
			if (mouseY <= windowH / 2 + 50 - 100 && mouseY >= windowH / 2 - 150) {
				stage = 3;
			}
		}
	}
	if (stage == 3 && s3db > 100) {
		stage = 4;
		s3db = 0;
		categoryG = categories[int(random(0, categories.length))]
		cw = categoryG.words
		ww = cw[Math.floor(random(0, cw.length))]
		for (let i = 0; i < ww.length; i++) {
			hiddenWord+="_"
		}
	}
	if (stage == 4) {
		if (mouseX >= 900) {
			if (mouseY >= 250) {
				stage = 5;
			} else {
				stage = 6;
			}
		}
	}
}

function keyPressed() {
	if (stage == 1) {
		if (key.match(/^[a-z0-9+-= ]$/i)) {
			players[playerEnteringName].name += key;
		} else if (key == "Enter") {
			players[playerEnteringName].exists = true;
			playerEnteringName += 1
		} else if (key == "Backspace") {
			players[playerEnteringName].name=""
		}
	}
	if (stage == 5) {
		if (key.match(/^[a-z0-9+-= ]$/i)) {
			if (guess.length < 2) {
				guess += key;
			}
		} else if (key == "Enter") {
			var sww = split(ww, "")
			for (let i = 0; i < ww.length; i++) {
				if (sww[i] == guess) {
					sword = split(hiddenWord, "")
					sword[i] = guess;
					hiddenWord = join(sword, "")
				}
			}
			stage = 4;
			guess = ""
			if(hiddenWord==ww){
				stage=2;
				players[turn].points+=prizePool
				prizePool=0;
				hiddenWord=""
			}
			turn = turn + 1
			if (players[turn].exists == false||turn==5) {
				turn = 1;
			}
		}
	}
	if (stage == 6) {
		if (key.match(/^[a-z0-9+-= ]$/i)) {
			guess += key;
		} else if (key == "Enter") {
				if(guess==ww){
					stage=2;
					players[turn].points+=prizePool
					prizePool=0;
					hiddenWord=""
					guess=""
					turn = turn + 1
					if (players[turn].exists == false||turn==5) {
						turn = 1;
					}
				} else {
					stage=4;
					turn = turn + 1
					if (players[turn].exists == false||turn==5) {
						turn = 1;
					}
					guess=""
				}
		} else if (key == "Backspace") {
			guess=""
		}
	}
}
